type Market @entity {
  id: ID!
  title: String! # Récupéré depuis IPFS
  description: String! # Récupéré depuis IPFS
  image: String! # Récupéré depuis IPFS
  owner: Bytes!
  stakeToken: Bytes!
  engagementDeadline: BigInt!
  resolutionDeadline: BigInt!
  creatorFee: BigInt!
  predictionCount: BigInt!
  totalAmount: BigInt!
  createdAt: BigInt!
  isCancelled: Boolean!
  isResolved: Boolean!
  winningChallenges: [BigInt!]
  challenges: [Challenge!]! @derivedFrom(field: "market")
  engagements: [Engagement!]! @derivedFrom(field: "market")
  collections: [Collection!]! @derivedFrom(field: "market")
  events: [MarketEvent!]! @derivedFrom(field: "market")
}

type Challenge @entity {
  id: ID!
  challengeId: BigInt!
  market: Market!
  totalAmount: BigInt!
  isWinner: Boolean
  engagements: [Engagement!]! @derivedFrom(field: "challenge")
}

type Engagement @entity {
  id: ID!
  user: User!
  market: Market!
  challenge: Challenge!
  amount: BigInt!
  timestamp: BigInt!
  hasCollected: Boolean!
  referrer: Bytes
}

type Collection @entity {
  id: ID!
  user: User!
  market: Market!
  amount: BigInt!
  timestamp: BigInt!
  recipient: Bytes!
}

type User @entity {
  id: ID!
  engagements: [Engagement!]! @derivedFrom(field: "user")
  collections: [Collection!]! @derivedFrom(field: "user")
  marketsCreated: [Market!]
  totalStaked: BigInt!
  totalCollected: BigInt!
  firstActivityAt: BigInt!
  lastActivityAt: BigInt!
}

type MarketEvent @entity {
  id: ID!
  title: String!
  description: String!
  market: Market!
}

type GlobalStat @entity {
  id: ID!
  totalMarkets: BigInt!
  totalUsers: BigInt!
  totalVolume: BigInt!
  activeMarkets: BigInt!
  resolvedMarkets: BigInt!
  cancelledMarkets: BigInt!
}
