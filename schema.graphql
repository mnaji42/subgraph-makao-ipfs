type Market @entity(immutable: false) {
  # Identifiant unique (adresse du contrat)
  id: ID!

  # Données blockchain essentielles
  contractAddress: Bytes!
  owner: Bytes!
  creator: Bytes!
  createdAt: BigInt!

  # Informations contractuelles
  stakeToken: Bytes!
  engagementDeadline: BigInt!
  resolutionDeadline: BigInt!
  creatorFee: BigInt!
  predictionCount: BigInt!

  # États gérés par les événements
  totalAmount: BigInt!
  isCancelled: Boolean!
  isResolved: Boolean!

  # Métadonnées IPFS
  ipfsHash: String
  # isMetadataSynced: Boolean!

  # Relations
  metadata: MarketMetadata @derivedFrom(field: "market")
  engagements: [Engagement!]! @derivedFrom(field: "market")
}

type MarketMetadata @entity(immutable: true) {
  id: ID!
  market: Market!

  name: String
  description: String
  image: String
  events: [MarketEvent!]! @derivedFrom(field: "marketMetadata")
}

type MarketEvent @entity(immutable: true) {
  # ID unique : {market.id}-{eventId}
  id: ID!

  # Données depuis IPFS
  eventId: BigInt!
  marketMetadata: MarketMetadata!
  name: String!
  description: String!

  # # Métadonnées
  # createdAt: BigInt!
}

type Engagement @entity(immutable: true) {
  # ID unique : transaction hash + log index
  id: ID!

  # Relations
  market: Market!
  user: Bytes!

  # Données de l'engagement
  amount: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

# Statistiques globales
type GlobalStat @entity(immutable: false) {
  id: ID! # Toujours "global"
  totalMarkets: BigInt!
  totalVolume: BigInt!
  totalUsers: BigInt!
  lastUpdated: BigInt!
}
